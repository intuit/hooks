package com.intuit.hooks.plugin

import com.intuit.hooks.plugin.ksp.HooksProcessor
import com.tschuchort.compiletesting.*
import org.jetbrains.kotlin.konan.properties.suffix
import org.jetbrains.kotlin.util.removeSuffixIfPresent
import org.junit.jupiter.api.Assertions
import java.io.File
import java.lang.reflect.InvocationTargetException

val KotlinCompilation.kspGeneratedSources get() =
    kspSourcesDir.walkTopDown().filter(File::isFile).toList()

/** Assert that all [sources] were generated by the KSP processor */
fun KotlinCompilation.assertKspGeneratedSources(vararg sources: String) {
    sources.map {
        kspSourcesDir.resolve("kotlin").resolve(
            it.removeSuffixIfPresent(".kt").replace(".", "/").suffix("kt")
        )
    }.forEach {
        Assertions.assertTrue(kspGeneratedSources.contains(it)) { "KSP processing did not generate file: $it" }
    }
}

/** Run patternized assertions from compiled classpath */
fun KotlinCompilation.Result.runCompiledAssertions(className: String = "AssertionsKt") {
    classLoader.loadClass(className).declaredMethods.forEach {
        it.isAccessible = true
        try {
            it.invoke(null)
        } catch (exception: InvocationTargetException) {
            Assertions.fail("Compiled assertion failed: ${it.name}", exception.targetException)
        }
    }
}

fun KotlinCompilation.Result.assertOk() = assertExitCode(KotlinCompilation.ExitCode.OK)
fun KotlinCompilation.Result.assertCompilationError() = assertExitCode(KotlinCompilation.ExitCode.COMPILATION_ERROR)
fun KotlinCompilation.Result.assertExitCode(code: KotlinCompilation.ExitCode) {
    Assertions.assertEquals(code, exitCode)
}

fun KotlinCompilation.Result.assertContainsMessages(vararg messages: String) {
    messages.forEach {
        Assertions.assertTrue(this.messages.contains(it)) {
            "Compilation result messages did not include: $it"
        }
    }
}

fun KotlinCompilation.Result.assertNoKspErrors() {
    Assertions.assertFalse(this.messages.contains("e: [ksp]")) {
        "Compilation result had a KSP error"
    }
}

/** Perform compilation on the [sources], utilizing the default configuration for the [HooksProcessor], if not explicitly configured */
fun compile(
    vararg sources: SourceFile,
    block: KotlinCompilation.() -> Unit = {
        symbolProcessorProviders = listOf(HooksProcessor.Provider())
        inheritClassPath = true
        kspWithCompilation = true
    }
): Pair<KotlinCompilation, KotlinCompilation.Result> = KotlinCompilation().apply {
    this.sources = sources.toList()
    block()
}.let { it to it.compile() }
